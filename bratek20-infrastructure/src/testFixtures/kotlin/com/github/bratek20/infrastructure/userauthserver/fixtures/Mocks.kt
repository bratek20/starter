// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.infrastructure.userauthserver.fixtures

import com.github.bratek20.infrastructure.userauthserver.api.*
import org.assertj.core.api.Assertions.assertThat

class UserAuthServerApiMock: UserAuthServerApi {
    private var createUserAndLoginCallsNumber: Int = 0
    private var createUserAndLoginResponse: (UserMappingDef.() -> Unit) = {}
    private var loginCallsNumber: Int = 0
    private var loginCalls: MutableList<AuthId> = mutableListOf()
    private var loginResponse: Int = 0
    override fun createUserAndLogin(): UserMapping {
        createUserAndLoginCallsNumber = createUserAndLoginCallsNumber + 1
        return userMapping(createUserAndLoginResponse)
    }
    fun assertCreateUserAndLoginCallsNumber(expectedNumber: Int) {
        assertThat(createUserAndLoginCallsNumber).withFailMessage("Expected 'createUserAndLogin' to be called " + expectedNumber + " times but was called " + createUserAndLoginCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setCreateUserAndLoginResponse(response: (UserMappingDef.() -> Unit)) {
        createUserAndLoginResponse = response
    }
    override fun login(authId: AuthId): UserId {
        loginCallsNumber = loginCallsNumber + 1
        loginCalls.add(authId)
        return UserId(loginResponse)
    }
    fun assertLoginCallsNumber(expectedNumber: Int) {
        assertThat(loginCallsNumber).withFailMessage("Expected 'login' to be called " + expectedNumber + " times but was called " + loginCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun assertLoginCalls(expectedArgs: List<String>) {
        assertLoginCallsNumber(expectedArgs.size)
        for (i in 0 until expectedArgs.size) {
            assertAuthId(loginCalls[i], expectedArgs[i])
        }
    }
    fun setLoginResponse(response: Int) {
        loginResponse = response
    }
    fun reset() {
        createUserAndLoginCallsNumber = 0
        createUserAndLoginResponse = {}
        loginCallsNumber = 0
        loginCalls = mutableListOf()
        loginResponse = 0
    }
}