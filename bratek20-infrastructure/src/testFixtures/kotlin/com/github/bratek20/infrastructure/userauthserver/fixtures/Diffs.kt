// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.infrastructure.userauthserver.fixtures

import com.github.bratek20.infrastructure.userauthserver.api.*

fun diffAuthId(given: AuthId, expected: String, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

fun diffUserId(given: UserId, expected: Int, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

data class ExpectedUserMapping(
    var authId: String? = null,
    var userId: Int? = null,
)
fun diffUserMapping(given: UserMapping, expectedInit: ExpectedUserMapping.() -> Unit, path: String = ""): String {
    val expected = ExpectedUserMapping().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.authId?.let {
        if (diffAuthId(given.getAuthId(), it) != "") { result.add(diffAuthId(given.getAuthId(), it, "${path}authId.")) }
    }

    expected.userId?.let {
        if (diffUserId(given.getUserId(), it) != "") { result.add(diffUserId(given.getUserId(), it, "${path}userId.")) }
    }

    return result.joinToString("\n")
}